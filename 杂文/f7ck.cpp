#pragma comment(linker, "/STACK:102400000,102400000")#include <bits/stdc++.h>#include <ctime>#include <iostream>#include <assert.h>#include <vector>#include <queue>#include <cstdio>#include <algorithm>#include <cstring>#define fi first#define se second#define endl '\n'#define o2(x) (x)*(x)#define BASE_MAX 31#define mk make_pair#define eb push_back#define SZ(x) ((int)(x).size())#define all(x) (x).begin(), (x).end()#define clr(a, b) memset((a),(b),sizeof((a)))#define iis std::ios::sync_with_stdio(false); cin.tie(0)#define my_unique(x) sort(all(x)),x.erase(unique(all(x)),x.end())using namespace std;#pragma optimize("-O3")typedef long long LL;typedef unsigned long long uLL;typedef pair<int, int> pii;mt19937 rng(time(NULL));inline LL read() {    LL x = 0;int f = 0;    char ch = getchar();    while (ch < '0' || ch > '9') f |= (ch == '-'), ch = getchar();    while (ch >= '0' && ch <= '9') x = (x << 3) + (x << 1) + ch - '0', ch = getchar();    return x = f ? -x : x;}inline void write(LL x, bool f) {    if (x == 0) {putchar('0'); if(f)putchar('\n');else putchar(' ');return;}    if (x < 0) {putchar('-');x = -x;}    static char s[23];    int l = 0;    while (x != 0)s[l++] = x % 10 + 48, x /= 10;    while (l)putchar(s[--l]);    if(f)putchar('\n');else putchar(' ');}int lowbit(int x) { return x & (-x); }template<class T>T big(const T &a1, const T &a2) { return a1 > a2 ? a1 : a2; }template<class T>T sml(const T &a1, const T &a2) { return a1 < a2 ? a1 : a2; }template<typename T, typename ...R>T big(const T &f, const R &...r) { return big(f, big(r...)); }template<typename T, typename ...R>T sml(const T &f, const R &...r) { return sml(f, sml(r...)); }void debug_out() { cout << '\n'; }template<typename T, typename ...R>void debug_out(const T &f, const R &...r) {cout << f << " ";debug_out(r...);}#define debug(...) cout << "[" << #__VA_ARGS__ << "]: ", debug_out(__VA_ARGS__);const LL INFLL = 0x3f3f3f3f3f3f3f3fLL;const int HMOD[] = {1000000009, 1004535809};const LL BASE[] = {1572872831, 1971536491};const int mod = 998244353;//715827883const int MOD = 1e9 + 7;//998244353const int INF = 0x3f3f3f3f;const int MXN = 1e6 + 3;const int MXE = 2e6 + 7;LL ksm(LL a, LL b, int Mod = mod) {LL res = 1;for(; b; b >>= 1, a = a * a % Mod) if(b & 1) res = res * a % Mod;return res;}int lenNum[MXN], ansNum[MXN];struct Suffix_Automaton {    static const int maxn = 2e5 + 105;    static const int MAXN = 2e5 + 5;    //basic//    map<char,int> nex[maxn * 2];    int nex[maxn*2][26];    int link[maxn * 2], len[maxn * 2], isend[maxn*2];    int last, cnt;    LL tot_c;//不同串的个数    //extension    int cntA[MAXN * 2], A[MAXN * 2];//辅助拓扑更新    int nums[MAXN * 2];//每个节点代表的所有串的出现次数    int pos[maxn*2];    void clear() {        tot_c = 0;        last = cnt = 1;        link[1] = len[1] = 0;//        nex[1].clear();        memset(nex[1], 0, sizeof(nex[1]));    }    void init_str(char *s, int id) {        int len1 = strlen(s);        for(int i = 0; i < len1; ++i) {            add(s[i] - 'a', id, i, i == (len1 - 1));        }    }    void add(int c, int id, int X, int f) {        int p = last;        int np = ++ cnt;        isend[cnt] = f;//        nex[cnt].clear();        memset(nex[cnt], 0, sizeof(nex[cnt]));        len[np] = len[p] + 1;        pos[id] = np;        last = np;        debug(np, X, f);        while (p && !nex[p][c])nex[p][c] = np, p = link[p];        if (!p)link[np] = 1, tot_c += len[np] - len[link[np]];        else {            int q = nex[p][c];            if (len[q] == len[p] + 1)link[np] = q, tot_c += len[np] - len[link[np]];            else {                int nq = ++cnt;                isend[nq] = (c == 10);                len[nq] = len[p] + 1;//                nex[nq] = nex[q];                memcpy(nex[nq], nex[q], sizeof(nex[q]));                link[nq] = link[q];                link[np] = link[q] = nq;                //sum[nq] = sum[q] , pre[nq] = pre[q];                tot_c += len[np] - len[link[np]];                while (nex[p][c] == q)nex[p][c] = nq, p = link[p];            }        }        //for(p = np; p && pre[p] != id; p = link[p]) pre[p] = id, ++ sum[p];        //广义SAM记录上一个经过他的是哪一个字符串以及有多少字符串经过这个字符串。    }    void build(int n) {        memset(cntA, 0, sizeof cntA);        memset(nums, 0, sizeof nums);//where to init?        for (int i = 1; i <= cnt; i++)cntA[len[i]]++;        for (int i = 1; i <= n; i++)cntA[i] += cntA[i - 1];        for (int i = cnt; i >= 1; i--)A[cntA[len[i]]--] = i;        //更行主串节点        int temps = 1;//        for(int i = 1; i <= cnt; ++i) debug(i, isend[i])    }} sam;int n;char s[MXN];int main() {#ifndef ONLINE_JUDGE    freopen("D:/in.in", "r", stdin);    // freopen("out.out", "w", stdout);#endif    n = read();    sam.clear();    for(int i = 1; i <= n; ++i) {        scanf("%s", s);        sam.init_str(s, 1);        sam.last = 1;    }    scanf("%s", s);    sam.init_str(s, 2);    int u = 1, ln = strlen(s + 2);    for(int i = 0; i < ln; ++i) {        u = sam.nex[u][s[i+2] - 'a'];        debug(u)    }    debug(u);    return 0;}/*有多少个1list and dict*/