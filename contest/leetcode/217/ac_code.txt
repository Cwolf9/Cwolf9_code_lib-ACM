https://leetcode-cn.com/contest/weekly-contest-217

#define fi first
#define se second
#define mk make_pair
#define o2(x) (x) * (x)
#define eb emplace_back
#define SZ(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define clr(a, b) memset((a), (b), sizeof((a)))
#define GKD std::ios::sync_with_stdio(false);cin.tie(0)
#define rep(i, s, t) for(int i = (s), LIM=(t); i < LIM; ++i)
#define per(i, s, t) for(int i = (s), LIM=(t); i >= LIM; --i)
#define my_unique(x) sort(all(x)), x.erase(unique(all(x)), x.end())
typedef long long LL;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;// 998244353
const int MXN = 1e5 + 5;
class Solution {
public:
    int maximumWealth(vector<vector<int>>& accounts) {
        int ans = 0;
        for(vector<int> &x: accounts) {
            ans = max(ans, accumulate(all(x), 0));
        }
        return ans;
    }
};

class Solution {
public:
    int dq[MXN];
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        int l = 0, r = 0;
        vector<int> ans;
        int n = nums.size();
        for(int i = 0; i < n; ++i) {
            if((int)ans.size() + n - i == k) {
                while(r > l && nums[dq[r]] > nums[i]) -- r;
                dq[++r] = i;
                ans.eb(nums[dq[l + 1]]);
                ++ l;
            }else {
                while(r > l && nums[dq[r]] > nums[i]) -- r;
                dq[++r] = i;
            }
        }
        return ans;
    }
};

class Solution {
public:
    int vis[MXN<<1], num[MXN<<1];
    int minMoves(vector<int>& nums, int limit) {
        int n = nums.size(), ans = 2 * n;
        int l = 0, r = n - 1;
        for(int i = 0; i <= limit + limit; ++i) vis[i] = 0;
        while(l < r) {
            int a = nums[l], b = nums[r];
            if(a > b) swap(a, b);
            ++ vis[a + 1];
            -- vis[b + limit + 1];
            ++ num[a + b];
            ++ l, -- r;
        }
        for(int i = 1; i <= limit + limit; ++i) {
            vis[i] += vis[i - 1];
        }
        for(int i = 1; i <= limit + limit; ++i) {
            ans = min(ans, (vis[i] - num[i]) + (n / 2 - vis[i]) * 2);
        }
        return ans;
    }
};

- 先把所有奇数乘`2`，这样就等价于只有操作`1`； 
- 操作`1`的只会减少某个数的值，减少最大值结果才可能更优； 
- 用`set`维护最大值，当最大值是奇数时停止； 
- 最多会执行$log(a_{max})$次，复杂度：$O(n*log(n)*log(a_{max})$。
- 还有一种$O(n*log(n))$的做法，就是先找到最后这个序列的最大值，然后再贪心。 
class Solution {
public:
    int minimumDeviation(vector<int>& nums) {
        set<int> ar;
        for(int x: nums) {
            if(x & 1) x <<= 1;
            ar.insert(x);
        }
        int ans = INF;
        while((int)ar.size() >= 2) {
            auto p = prev(ar.end());
            int pp = *p;
            ans = min(ans, pp - *ar.begin());
            if(pp % 2 == 0) {
                ar.erase(p);
                ar.insert(pp / 2);
            }else break;
        }
        auto p = prev(ar.end());
        ans = min(ans, *p - *ar.begin());
        return ans;
    }
};